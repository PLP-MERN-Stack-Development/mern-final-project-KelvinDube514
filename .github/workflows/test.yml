name: Tests and Quality Assurance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run linter
        working-directory: ./backend
        run: npm run lint
      
      - name: Run unit tests
        working-directory: ./backend
        run: npm test
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-key
          REFRESH_TOKEN_SECRET: test-refresh-secret
      
      - name: Generate coverage report
        working-directory: ./backend
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run linter
        working-directory: ./frontend
        run: npm run lint
      
      - name: Run unit tests
        working-directory: ./frontend
        run: npm test
      
      - name: Generate coverage report
        working-directory: ./frontend
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps
      
      - name: Start backend server
        working-directory: ./backend
        run: |
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 5000
          MONGODB_URI: mongodb://localhost:27017/securepath-test
          JWT_SECRET: test-secret-key
          REFRESH_TOKEN_SECRET: test-refresh-secret
      
      - name: Run E2E tests
        working-directory: ./frontend
        run: npm run test:e2e
        env:
          VITE_API_URL: http://localhost:5000
      
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps chromium
      
      - name: Run accessibility tests
        working-directory: ./frontend
        run: npx playwright test e2e/accessibility.spec.ts
      
      - name: Upload accessibility report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report
          path: frontend/playwright-report/
          retention-days: 30

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run backend linter
        working-directory: ./backend
        run: npm run lint
      
      - name: Run frontend linter
        working-directory: ./frontend
        run: npm run lint
      
      - name: Check formatting (backend)
        working-directory: ./backend
        run: npm run format -- --check || true
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        if: github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run npm audit (backend)
        working-directory: ./backend
        run: npm audit --audit-level=moderate || true
      
      - name: Run npm audit (frontend)
        working-directory: ./frontend
        run: npm audit --audit-level=moderate || true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, accessibility-tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Accessibility Tests: ${{ needs.accessibility-tests.result }}"
          
          if [ "${{ needs.backend-tests.result }}" != "success" ] || \
             [ "${{ needs.frontend-tests.result }}" != "success" ] || \
             [ "${{ needs.e2e-tests.result }}" != "success" ] || \
             [ "${{ needs.accessibility-tests.result }}" != "success" ]; then
            echo "Some tests failed!"
            exit 1
          fi
          
          echo "All tests passed successfully!"
